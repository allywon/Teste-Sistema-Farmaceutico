unit Controller.Procedimento;

interface

uses
  System.JSON, System.SysUtils, System.Classes, System.Generics.Collections,
  REST.Types,
  Model.Procedimento, Model.Procedimento.Tipo,
  Service.RESTBase;

type
  TProcedimentoController = class(TRESTServiceBase)
  public
    function BuscarTodos: TObjectList<TProcedimento>;
    function BuscarPorId(Id: Int64): TProcedimento;
//    function Gravar(AProc: TProcedimento): Boolean;
//    function Atualizar(AProc: TProcedimento): Boolean;
    function Salvar(AProcedimento: TProcedimento): Boolean;
    function Excluir(Id: Int64): Boolean;
  end;

implementation

uses
  Procedimento.Mapper;

function TProcedimentoController.BuscarTodos: TObjectList<TProcedimento>;
var
  JSONArray: TJSONArray;
  Item: TJSONValue;
  Mapper: TProcedimentoMapper;
begin
  Result := TObjectList<TProcedimento>.Create(True);
  Mapper := TProcedimentoMapper.Create;
  try
    FRESTRequest.Method := rmGET;
    FRESTRequest.Resource := 'procedimentos';
    FRESTRequest.Execute;

    if FRESTResponse.StatusCode = 200 then
    begin
      JSONArray := TJSONObject.ParseJSONValue(FRESTResponse.Content) as TJSONArray;
      for Item in JSONArray do
        Result.Add(Mapper.DeJSON(Item as TJSONObject));
    end;
  finally
    Mapper.Free;
  end;
end;

function TProcedimentoController.BuscarPorId(Id: Int64): TProcedimento;
var
  Obj: TJSONObject;
  Mapper: TProcedimentoMapper;
begin
  Result := nil;
  Mapper := TProcedimentoMapper.Create;
  try
    FRESTRequest.Method := rmGET;
    FRESTRequest.Resource := Format('procedimentos/%d', [Id]);
    FRESTRequest.Execute;

    if FRESTResponse.StatusCode = 200 then
    begin
      Obj := TJSONObject.ParseJSONValue(FRESTResponse.Content) as TJSONObject;
      Result := Mapper.DeJSON(Obj);
    end;
  finally
    Mapper.Free;
  end;
end;

//function TProcedimentoController.Gravar(AProc: TProcedimento): Boolean;
//var
//  JSON: TJSONObject;
//  Mapper: TProcedimentoMapper;
//begin
//  Result := False;
//  Mapper := TProcedimentoMapper.Create;
//  try
//    JSON := Mapper.ParaJSON(AProc);
//    try
//      FRESTRequest.Method := rmPOST;
//      FRESTRequest.Resource := 'procedimentos';
//      FRESTRequest.Body.ClearBody;
//      FRESTRequest.Body.Add(JSON.ToJSON, TRESTContentType.ctAPPLICATION_JSON);
//      FRESTRequest.Execute;
//
//      Result := FRESTResponse.StatusCode in [200, 201];
//    finally
//      JSON.Free;
//    end;
//  finally
//    Mapper.Free;
//  end;
//end;

//function TProcedimentoController.Atualizar(AProc: TProcedimento): Boolean;
//var
//  JSON: TJSONObject;
//  Mapper: TProcedimentoMapper;
//  Resource: string;
//  ResponseContent: string;
//begin
//  Result := False;
//  Mapper := TProcedimentoMapper.Create;
//  try
//    JSON := Mapper.ParaJSON(AProc);
//    try
//      Resource := Format('procedimentos/%d', [AProc.Id]);
//      ResponseContent := ExecutarRequisicao(rmPUT, Resource, JSON.ToJSON);
//
//      Result := FRESTResponse.StatusCode = 200;
//    finally
//      JSON.Free;
//    end;
//  finally
//    Mapper.Free;
//  end;
//end;

function TProcedimentoController.Excluir(Id: Int64): Boolean;
begin
  FRESTRequest.Method := rmDELETE;
  FRESTRequest.Resource := Format('procedimentos/%d', [Id]);
  FRESTRequest.Body.ClearBody;
  FRESTRequest.Execute;

  Result := FRESTResponse.StatusCode = 200;
end;

function TProcedimentoController.Salvar(AProcedimento: TProcedimento): Boolean;
var
  lJSON: TJSONObject;
  lResource: string;
  lMetodo: TRESTRequestMethod;
  lResponseContent: string;
begin
  Result := False;
  lJSON := TProcedimentoMapper.Create.ParaJSON(AProcedimento);
  try
    if AProcedimento.Id = 0 then
    begin
      lMetodo := rmPOST;
      lResource := 'procedimentos';
    end
    else
    begin
      lMetodo := rmPUT;
      lResource := Format('procedimentos/%d', [AProcedimento.Id]);
    end;

    try
      lResponseContent := ExecutarRequisicao(lMetodo, lResource, lJSON.ToJSON);
      Result := FRESTResponse.StatusCode in [200, 201];
    except
      on E: Exception do
      begin
        AProcedimento.Aviso := FRESTResponse.Content;
        Result := False;
      end;
    end;
  finally
    lJSON.Free;
  end;
end;

end.

