unit Cadastro.Procedimentos;

interface

uses
  System.SysUtils, System.Classes, Vcl.Graphics, Vcl.Controls,
  Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.StdCtrls, Vcl.Mask,
  Vcl.DBCtrls, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids,
  Vcl.Buttons, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, System.ImageList, Vcl.ImgList,
  Vcl.VirtualImage, Vcl.Imaging.pngimage;

type
  TfrmProcedimentos = class(TForm)
    pnlTop: TPanel;
    lblTitulo: TLabel;
    pnlBottom: TPanel;
    pnlCentro: TPanel;
    pnlDados: TPanel;
    pnlGrid: TPanel;
    dbgProcedimentos: TDBGrid;
    dsProcedimentos: TDataSource;
    FDMemTable: TFDMemTable;
    pnlBotoes: TPanel;
    btnNovo: TBitBtn;
    btnEditar: TBitBtn;
    btnSalvar: TBitBtn;
    lblCodigo: TLabel;
    edtCodigo: TDBEdit;
    lblTipo: TLabel;
    cmbTipo: TDBComboBox;
    lblDescricao: TLabel;
    edtDescricao: TDBEdit;
    lblValor: TLabel;
    edtValor: TDBEdit;
    btnPesquisar: TBitBtn;
    edtPesquisa: TEdit;
    lblPesquisa: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnEditarClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnPesquisarClick(Sender: TObject);
    procedure edtPesquisaKeyPress(Sender: TObject; var Key: Char);
    procedure FormDestroy(Sender: TObject);
    procedure FDMemTableBeforePost(DataSet: TDataSet);
    procedure dbgProcedimentosDblClick(Sender: TObject);
    procedure ConfigurarModoEdicao(Editando: Boolean);
  private
    { Private declarations }
    FUltimoID: Integer;
    function GerarNovoCodigo: Integer;
    procedure SetupMemTable;
    procedure PreencherTiposProcedimentos;
  public
    { Public declarations }
  end;

var
  frmProcedimentos: TfrmProcedimentos;

implementation

{$R *.dfm}

procedure TfrmProcedimentos.FormCreate(Sender: TObject);
begin
  FUltimoID := 0;
  SetupMemTable;
  PreencherTiposProcedimentos;
  ConfigurarModoEdicao(False);
end;

procedure TfrmProcedimentos.SetupMemTable;
begin
  // Configuração da tabela de memória para os procedimentos
  with FDMemTable do
  begin
    Close;
    FieldDefs.Clear;
    FieldDefs.Add('CODIGO', ftInteger);
    FieldDefs.Add('TIPO', ftString, 50);
    FieldDefs.Add('DESCRICAO', ftString, 255);
    FieldDefs.Add('VALOR', ftCurrency);
    CreateDataSet;
    Open;

    // Dados de exemplo para a visualização inicial
    AppendRecord([1, 'Atenção farmacêutica domiciliar', 'Visita domiciliar para acompanhamento farmacoterapêutico', 120.00]);
    AppendRecord([2, 'Aferição de pressão arterial', 'Medição e registro da pressão arterial', 25.00]);
    AppendRecord([3, 'Aferição de temperatura corporal', 'Verificação da temperatura corporal', 15.00]);
    AppendRecord([4, 'Aferição de glicemia capilar', 'Teste de glicemia com punção digital', 30.00]);
    AppendRecord([5, 'Inalação', 'Administração de medicamentos por inalação', 35.00]);
    AppendRecord([6, 'Aplicação de injetáveis', 'Aplicação de medicamentos injetáveis', 45.00]);

    FUltimoID := 6; // Último ID usado nos exemplos
  end;
  dsProcedimentos.DataSet := FDMemTable;
end;

procedure TfrmProcedimentos.PreencherTiposProcedimentos;
begin
  // Preenche o combobox com os tipos de procedimentos
  cmbTipo.Items.Clear;
  cmbTipo.Items.Add('Atenção farmacêutica domiciliar');
  cmbTipo.Items.Add('Aferição de pressão arterial');
  cmbTipo.Items.Add('Aferição de temperatura corporal');
  cmbTipo.Items.Add('Aferição de glicemia capilar');
  cmbTipo.Items.Add('Inalação');
  cmbTipo.Items.Add('Aplicação de injetáveis');
end;

procedure TfrmProcedimentos.btnNovoClick(Sender: TObject);
begin
  FDMemTable.Append;
  edtCodigo.Text := IntToStr(GerarNovoCodigo);
  ConfigurarModoEdicao(True);
  cmbTipo.SetFocus;
end;

procedure TfrmProcedimentos.btnEditarClick(Sender: TObject);
begin
  if not FDMemTable.IsEmpty then
  begin
    FDMemTable.Edit;
    ConfigurarModoEdicao(True);
    cmbTipo.SetFocus;
  end
  else
    ShowMessage('Nenhum procedimento selecionado para edição.');
end;

procedure TfrmProcedimentos.btnSalvarClick(Sender: TObject);
begin
  if Trim(cmbTipo.Text) = '' then
  begin
    ShowMessage('O tipo do procedimento é obrigatório.');
    cmbTipo.SetFocus;
    Exit;
  end;

  if Trim(edtDescricao.Text) = '' then
  begin
    ShowMessage('A descrição do procedimento é obrigatória.');
    edtDescricao.SetFocus;
    Exit;
  end;

  try
    StrToCurr(edtValor.Text);
  except
    ShowMessage('Valor inválido. Por favor, informe um valor numérico válido.');
    edtValor.SetFocus;
    Exit;
  end;

  try
    FDMemTable.Post;
    ConfigurarModoEdicao(False);
    ShowMessage('Procedimento salvo com sucesso!');
  except
    on E: Exception do
      ShowMessage('Erro ao salvar: ' + E.Message);
  end;
end;

procedure TfrmProcedimentos.btnCancelarClick(Sender: TObject);
begin
  FDMemTable.Cancel;
  ConfigurarModoEdicao(False);
end;

procedure TfrmProcedimentos.btnExcluirClick(Sender: TObject);
begin
  if FDMemTable.IsEmpty then
  begin
    ShowMessage('Não há procedimento selecionado para excluir.');
    Exit;
  end;

  if MessageDlg('Deseja realmente excluir este procedimento?',
                mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    try
      FDMemTable.Delete;
      ShowMessage('Procedimento excluído com sucesso!');
    except
      on E: Exception do
        ShowMessage('Erro ao excluir: ' + E.Message);
    end;
  end;
end;

procedure TfrmProcedimentos.btnPesquisarClick(Sender: TObject);
var
  Texto: string;
  Encontrou: Boolean;
  Bookmark: TBookmark;
begin
  if FDMemTable.IsEmpty then
  begin
    ShowMessage('Não há procedimentos cadastrados para pesquisar.');
    Exit;
  end;

  Texto := AnsiLowerCase(Trim(edtPesquisa.Text));
  if Texto = '' then
  begin
    ShowMessage('Informe um texto para pesquisa.');
    edtPesquisa.SetFocus;
    Exit;
  end;

  Encontrou := False;
  Bookmark := FDMemTable.GetBookmark;

  try
    FDMemTable.DisableControls;
    FDMemTable.First;

    while not FDMemTable.Eof do
    begin
      if (Pos(Texto, AnsiLowerCase(FDMemTable.FieldByName('TIPO').AsString)) > 0) or
         (Pos(Texto, AnsiLowerCase(FDMemTable.FieldByName('DESCRICAO').AsString)) > 0) then
      begin
        Encontrou := True;
        Break;
      end;
      FDMemTable.Next;
    end;

    if not Encontrou then
    begin
      ShowMessage('Nenhum procedimento encontrado com o texto "' + edtPesquisa.Text + '".');
      FDMemTable.GotoBookmark(Bookmark);
    end;
  finally
    FDMemTable.EnableControls;
    FDMemTable.FreeBookmark(Bookmark);
  end;
end;

procedure TfrmProcedimentos.edtPesquisaKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    btnPesquisarClick(Sender);
  end;
end;

procedure TfrmProcedimentos.FDMemTableBeforePost(DataSet: TDataSet);
begin
  // Garantir que o código seja válido
  if DataSet.FieldByName('CODIGO').AsInteger <= 0 then
    DataSet.FieldByName('CODIGO').AsInteger := GerarNovoCodigo;
end;

procedure TfrmProcedimentos.FormDestroy(Sender: TObject);
begin
  FDMemTable.Close;
end;

procedure TfrmProcedimentos.dbgProcedimentosDblClick(Sender: TObject);
begin
  if not FDMemTable.IsEmpty then
    btnEditarClick(Sender);
end;

function TfrmProcedimentos.GerarNovoCodigo: Integer;
begin
  Inc(FUltimoID);
  Result := FUltimoID;
end;

procedure TfrmProcedimentos.ConfigurarModoEdicao(Editando: Boolean);
begin
  // Controle dos botões conforme modo de edição
  btnNovo.Enabled := not Editando;
  btnEditar.Enabled := not Editando and not FDMemTable.IsEmpty;
  btnExcluir.Enabled := not Editando and not FDMemTable.IsEmpty;
  btnSalvar.Enabled := Editando;
  btnCancelar.Enabled := Editando;
  btnPesquisar.Enabled := not Editando;
  edtPesquisa.Enabled := not Editando;

  // Controle do grid e campos
  dbgProcedimentos.Enabled := not Editando;
  edtDescricao.Enabled := Editando;
  edtValor.Enabled := Editando;
  cmbTipo.Enabled := Editando;

  // O campo código é sempre somente leitura
  edtCodigo.ReadOnly := True;
end;

end.
