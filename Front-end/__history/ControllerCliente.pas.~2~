unit ControllerCliente;

interface

uses
  System.SysUtils, System.Classes, System.Net.HttpClient, System.JSON,
  REST.Client, REST.Types, REST.Response.Adapter;

type
  TClienteController = class
  private
    FRESTClient: TRESTClient;
    FRESTRequest: TRESTRequest;
    FRESTResponse: TRESTResponse;
  public
    constructor Create;
    destructor Destroy; override;

    function ObterTodosClientes: TJSONArray;
    function ObterClientePorId(const Id: Integer): TJSONObject;
    function InserirCliente(const Nome, Email, Telefone: string): Boolean;
    function AtualizarCliente(const Id: Integer; const Nome, Email, Telefone: string): Boolean;
    function ExcluirCliente(const Id: Integer): Boolean;
  end;

implementation

constructor TClienteController.Create;
begin
  inherited Create;

  FRESTClient := TRESTClient.Create('http://localhost:8080');
  FRESTClient.Accept := 'application/json';
  FRESTClient.ContentType := 'application/json';

  FRESTResponse := TRESTResponse.Create(nil);

  FRESTRequest := TRESTRequest.Create(nil);
  FRESTRequest.Client := FRESTClient;
  FRESTRequest.Response := FRESTResponse;
end;

destructor TClienteController.Destroy;
begin
  FRESTRequest.Free;
  FRESTResponse.Free;
  FRESTClient.Free;

  inherited;
end;

function TClienteController.ObterTodosClientes: TJSONArray;
begin
  try
    FRESTRequest.Method := rmGET;
    FRESTRequest.Resource := 'clientes';
    FRESTRequest.Execute;

    if FRESTResponse.StatusCode = 200 then
      Result := TJSONObject.ParseJSONValue(FRESTResponse.Content) as TJSONArray
    else
      Result := TJSONArray.Create;
  except
    on E: Exception do
    begin
      Result := TJSONArray.Create;
    end;
  end;
end;

function TClienteController.ObterClientePorId(const Id: Integer): TJSONObject;
begin
  try
    FRESTRequest.Method := rmGET;
    FRESTRequest.Resource := Format('clientes/%d', [Id]);
    FRESTRequest.Execute;

    if FRESTResponse.StatusCode = 200 then
      Result := TJSONObject.ParseJSONValue(FRESTResponse.Content) as TJSONObject
    else
      Result := TJSONObject.Create;
  except
    on E: Exception do
    begin
      Result := TJSONObject.Create;
    end;
  end;
end;

function TClienteController.InserirCliente(const Nome, Email, Telefone: string): Boolean;
var
  JSONObj: TJSONObject;
begin
  Result := False;
  JSONObj := TJSONObject.Create;
  try
    JSONObj.AddPair('nome', Nome);
    JSONObj.AddPair('email', Email);
    JSONObj.AddPair('telefone', Telefone);

    FRESTRequest.Method := rmPOST;
    FRESTRequest.Resource := 'clientes';
    FRESTRequest.Body.ClearBody;
    FRESTRequest.Body.Add(JSONObj.ToJSON, ContentTypeFromString('application/json'));
    FRESTRequest.Execute;

    Result := (FRESTResponse.StatusCode = 201);
  finally
    JSONObj.Free;
  end;
end;

function TClienteController.AtualizarCliente(const Id: Integer; const Nome, Email, Telefone: string): Boolean;
var
  JSONObj: TJSONObject;
begin
  Result := False;
  JSONObj := TJSONObject.Create;
  try
    JSONObj.AddPair('nome', Nome);
    JSONObj.AddPair('email', Email);
    JSONObj.AddPair('telefone', Telefone);

    FRESTRequest.Method := rmPUT;
    FRESTRequest.Resource := Format('clientes/%d', [Id]);
    FRESTRequest.Body.ClearBody;
    FRESTRequest.Body.Add(JSONObj.ToJSON, ContentTypeFromString('application/json'));
    FRESTRequest.Execute;

    Result := (FRESTResponse.StatusCode = 200);
  finally
    JSONObj.Free;
  end;
end;

function TClienteController.ExcluirCliente(const Id: Integer): Boolean;
begin
  FRESTRequest.Method := rmDELETE;
  FRESTRequest.Resource := Format('clientes/%d', [Id]);
  FRESTRequest.Body.ClearBody;
  FRESTRequest.Execute;

  Result := (FRESTResponse.StatusCode = 200);
end;

end.
