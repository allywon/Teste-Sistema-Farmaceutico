unit FormPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Grids, Vcl.DBGrids,
  Vcl.ExtCtrls, Vcl.Buttons, Data.DB, Datasnap.DBClient, System.JSON,
  ControllerCliente;

type
  TfrmPrincipal = class(TForm)
    pnlTopo: TPanel;
    pnlCliente: TPanel;
    pnlBotoes: TPanel;
    btnNovo: TSpeedButton;
    btnEditar: TSpeedButton;
    btnExcluir: TSpeedButton;
    btnAtualizar: TSpeedButton;
    dbgClientes: TDBGrid;
    dsClientes: TDataSource;
    cdsClientes: TClientDataSet;
    cdsClientesid: TIntegerField;
    cdsClientesnome: TStringField;
    cdsClientesemail: TStringField;
    cdsClientestelefone: TStringField;
    edtNome: TEdit;
    edtEmail: TEdit;
    edtTelefone: TEdit;
    lblNome: TLabel;
    lblEmail: TLabel;
    lblTelefone: TLabel;
    btnSalvar: TButton;
    btnCancelar: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure btnAtualizarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnEditarClick(Sender: TObject);
    procedure btnExcluirClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
  private
    { Private declarations }
    FClienteController: TClienteController;
    FModoEdicao: Boolean;
    FIdClienteEdicao: Integer;

    procedure CarregarClientes;
    procedure HabilitarCamposEdicao(const Habilitar: Boolean);
    procedure LimparCampos;
    procedure PreencherCamposComClienteAtual;
  public
    { Public declarations }
  end;

var
  Form1: TfrmPrincipal;

implementation

{$R *.dfm}

procedure TfrmPrincipal.FormCreate(Sender: TObject);
begin
  FClienteController := TClienteController.Create;
  FModoEdicao := False;
  FIdClienteEdicao := 0;

  // Configurar ClientDataSet
  cdsClientes.CreateDataSet;

  HabilitarCamposEdicao(False);
  CarregarClientes;
end;

procedure TfrmPrincipal.FormDestroy(Sender: TObject);
begin
  FClienteController.Free;
end;

procedure TfrmPrincipal.CarregarClientes;
var
  JSONArray: TJSONArray;
  JSONObj: TJSONObject;
  I: Integer;
begin
  cdsClientes.EmptyDataSet;

  // Obter dados do servidor via controller
  JSONArray := FClienteController.ObterTodosClientes;
  try
    for I := 0 to JSONArray.Count - 1 do
    begin
      JSONObj := JSONArray.Items[I] as TJSONObject;

      cdsClientes.Append;
      cdsClientesid.AsInteger := JSONObj.GetValue<Integer>('id');
      cdsClientesnome.AsString := JSONObj.GetValue<string>('nome');
      cdsClientesemail.AsString := JSONObj.GetValue<string>('email');
      cdsClientestelefone.AsString := JSONObj.GetValue<string>('telefone');
      cdsClientes.Post;
    end;
  finally
    JSONArray.Free;
  end;
end;

procedure TfrmPrincipal.HabilitarCamposEdicao(const Habilitar: Boolean);
begin
  pnlCliente.Visible := Habilitar;
  pnlBotoes.Enabled := not Habilitar;
  dbgClientes.Enabled := not Habilitar;

  if Habilitar then
    edtNome.SetFocus;
end;

procedure TfrmPrincipal.LimparCampos;
begin
  edtNome.Clear;
  edtEmail.Clear;
  edtTelefone.Clear;
end;

procedure TfrmPrincipal.PreencherCamposComClienteAtual;
var
  JSONObj: TJSONObject;
begin
  if not cdsClientes.IsEmpty then
  begin
    FIdClienteEdicao := cdsClientesid.AsInteger;
    JSONObj := FClienteController.ObterClientePorId(FIdClienteEdicao);
    try
      edtNome.Text := JSONObj.GetValue<string>('nome');
      edtEmail.Text := JSONObj.GetValue<string>('email');
      edtTelefone.Text := JSONObj.GetValue<string>('telefone');
    finally
      JSONObj.Free;
    end;
  end;
end;

procedure TfrmPrincipal.btnAtualizarClick(Sender: TObject);
begin
  CarregarClientes;
  ShowMessage('Lista de clientes atualizada!');
end;

procedure TfrmPrincipal.btnNovoClick(Sender: TObject);
begin
  FModoEdicao := False;
  FIdClienteEdicao := 0;
  LimparCampos;
  HabilitarCamposEdicao(True);
end;

procedure TfrmPrincipal.btnEditarClick(Sender: TObject);
begin
  if cdsClientes.IsEmpty then
  begin
    ShowMessage('Selecione um cliente para editar!');
    Exit;
  end;

  FModoEdicao := True;
  PreencherCamposComClienteAtual;
  HabilitarCamposEdicao(True);
end;

procedure TfrmPrincipal.btnExcluirClick(Sender: TObject);
begin
  if cdsClientes.IsEmpty then
  begin
    ShowMessage('Selecione um cliente para excluir!');
    Exit;
  end;

  if MessageDlg('Confirma a exclusão do cliente selecionado?', mtConfirmation, [mbYes, mbNo], 0) = mrYes then
  begin
    if FClienteController.ExcluirCliente(cdsClientesid.AsInteger) then
    begin
      ShowMessage('Cliente excluído com sucesso!');
      CarregarClientes;
    end
    else
      ShowMessage('Erro ao excluir cliente!');
  end;
end;

procedure TfrmPrincipal.btnSalvarClick(Sender: TObject);
var
  Nome, Email, Telefone: string;
  Sucesso: Boolean;
begin
  Nome := Trim(edtNome.Text);
  Email := Trim(edtEmail.Text);
  Telefone := Trim(edtTelefone.Text);

  if Nome = '' then
  begin
    ShowMessage('O nome do cliente é obrigatório!');
    edtNome.SetFocus;
    Exit;
  end;

  if Email = '' then
  begin
    ShowMessage('O email do cliente é obrigatório!');
    edtEmail.SetFocus;
    Exit;
  end;

  if FModoEdicao then
    Sucesso := FClienteController.AtualizarCliente(FIdClienteEdicao, Nome, Email, Telefone)
  else
    Sucesso := FClienteController.InserirCliente(Nome, Email, Telefone);

  if Sucesso then
  begin
    ShowMessage( 'Cliente atualizado com sucesso! Cliente cadastrado com sucesso!');
    HabilitarCamposEdicao(False);
    CarregarClientes;
  end
  else
    ShowMessage('Erro ao atualizar cliente! Erro ao cadastrar cliente!');
end;

procedure TfrmPrincipal.btnCancelarClick(Sender: TObject);
begin
  HabilitarCamposEdicao(False);
  LimparCampos;
end;
