unit ModelDB;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  System.JSON,
  System.Net.URLClient, IdHTTPWebBrokerBridge, FireDAC.ConsoleUI.Wait;

type
  TModelDB = class(TDataModule)
    FDConnection: TFDConnection;
    FDPhysMySQLDriverLink: TFDPhysMySQLDriverLink;
    qryClientes: TFDQuery;
    qryClientesid: TFDAutoIncField;
    qryClientesnome: TStringField;
    qryClientesemail: TStringField;
    qryClientestelefone: TStringField;
    procedure DataModuleCreate(Sender: TObject);
  private
    { Private declarations }
    FHTTPServer: TIdHTTPWebBrokerBridge;
    procedure IniciarServidor;
  public
    { Public declarations }
    function ConectarBanco: Boolean;
    procedure DesconectarBanco;
    function ObterClientes: TJSONArray;
    function ObterClientePorId(const Id: Integer): TJSONObject;
    function InserirCliente(const Nome, Email, Telefone: string): Boolean;
    function AtualizarCliente(const Id: Integer; const Nome, Email, Telefone: string): Boolean;
    function ExcluirCliente(const Id: Integer): Boolean;
  end;

var
  DBModel: TModelDB;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TModelDB.DataModuleCreate(Sender: TObject);
begin
  FDConnection.Connected := False;
  FDPhysMySQLDriverLink.VendorLib := ExtractFilePath(ParamStr(0)) + 'libmysql.dll';

  // Iniciar o servidor HTTP para comunicação com a aplicação VCL
  IniciarServidor;
end;

procedure TModelDB.IniciarServidor;
begin
  FHTTPServer := TIdHTTPWebBrokerBridge.Create(nil);
  FHTTPServer.DefaultPort := 8080;
  FHTTPServer.Active := True;

  WriteLn('Servidor Model iniciado na porta 8080...');
  WriteLn('Pressione Enter para encerrar');
end;

function TModelDB.ConectarBanco: Boolean;
begin
  Result := False;
  try
    FDConnection.Connected := False;
    FDConnection.Params.Clear;
    FDConnection.Params.DriverID:='MySQL';
    FDConnection.Params.Values['Server']:='localhost';
    FDConnection.Params.Values['Port']:='3306';
    FDConnection.Params.Database:='banco_teste';
    FDConnection.Params.UserName:='root';
    FDConnection.Params.Password:='root';
    FDConnection.Params.Values['CharacterSet']:='UTF8';
    FDConnection.Params.Values['UseSSL'] := 'False';
    FDConnection.FormatOptions.SortLocale:=1046;
    FDConnection.FetchOptions.RowsetSize:=-1;

    FDConnection.Connected := True;
    Result := True;
    WriteLn('Conexão com o banco de dados MySQL estabelecida com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao conectar ao banco: ' + E.Message);
      Result := False;
    end;
  end;
end;

procedure TModelDB.DesconectarBanco;
begin
  if FDConnection.Connected then
  begin
    FDConnection.Connected := False;
    WriteLn('Conexão com o banco de dados encerrada.');
  end;
end;

function TModelDB.ObterClientes: TJSONArray;
var
  JSONArray: TJSONArray;
  JSONObj: TJSONObject;
begin
  JSONArray := TJSONArray.Create;
  try
    qryClientes.Close;
    qryClientes.SQL.Text := 'SELECT * FROM clientes';
    qryClientes.Open;

    qryClientes.First;
    while not qryClientes.Eof do
    begin
      JSONObj := TJSONObject.Create;
      JSONObj.AddPair('id', TJSONNumber.Create(qryClientesid.AsInteger));
      JSONObj.AddPair('nome', qryClientesnome.AsString);
      JSONObj.AddPair('email', qryClientesemail.AsString);
      JSONObj.AddPair('telefone', qryClientestelefone.AsString);

      JSONArray.AddElement(JSONObj);
      qryClientes.Next;
    end;

    Result := JSONArray;
  except
    on E: Exception do
    begin
      JSONArray.Free;
      Result := TJSONArray.Create;
      WriteLn('Erro ao obter clientes: ' + E.Message);
    end;
  end;
end;

function TModelDB.ObterClientePorId(const Id: Integer): TJSONObject;
var
  JSONObj: TJSONObject;
begin
  JSONObj := TJSONObject.Create;
  try
    qryClientes.Close;
    qryClientes.SQL.Text := 'SELECT * FROM clientes WHERE id = :id';
    qryClientes.ParamByName('id').AsInteger := Id;
    qryClientes.Open;

    if not qryClientes.IsEmpty then
    begin
      JSONObj.AddPair('id', TJSONNumber.Create(qryClientesid.AsInteger));
      JSONObj.AddPair('nome', qryClientesnome.AsString);
      JSONObj.AddPair('email', qryClientesemail.AsString);
      JSONObj.AddPair('telefone', qryClientestelefone.AsString);
    end;

    Result := JSONObj;
  except
    on E: Exception do
    begin
      JSONObj.Free;
      Result := TJSONObject.Create;
      WriteLn('Erro ao obter cliente por ID: ' + E.Message);
    end;
  end;
end;

function TModelDB.InserirCliente(const Nome, Email, Telefone: string): Boolean;
begin
  Result := False;
  try
    qryClientes.Close;
    qryClientes.SQL.Text := 'INSERT INTO clientes (nome, email, telefone) VALUES (:nome, :email, :telefone)';
    qryClientes.ParamByName('nome').AsString := Nome;
    qryClientes.ParamByName('email').AsString := Email;
    qryClientes.ParamByName('telefone').AsString := Telefone;
    qryClientes.ExecSQL;

    Result := True;
    WriteLn('Cliente inserido com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao inserir cliente: ' + E.Message);
      Result := False;
    end;
  end;
end;

function TModelDB.AtualizarCliente(const Id: Integer; const Nome, Email, Telefone: string): Boolean;
begin
  Result := False;
  try
    qryClientes.Close;
    qryClientes.SQL.Text := 'UPDATE clientes SET nome = :nome, email = :email, telefone = :telefone WHERE id = :id';
    qryClientes.ParamByName('id').AsInteger := Id;
    qryClientes.ParamByName('nome').AsString := Nome;
    qryClientes.ParamByName('email').AsString := Email;
    qryClientes.ParamByName('telefone').AsString := Telefone;
    qryClientes.ExecSQL;

    Result := True;
    WriteLn('Cliente atualizado com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao atualizar cliente: ' + E.Message);
      Result := False;
    end;
  end;
end;

function TModelDB.ExcluirCliente(const Id: Integer): Boolean;
begin
  Result := False;
  try
    qryClientes.Close;
    qryClientes.SQL.Text := 'DELETE FROM clientes WHERE id = :id';
    qryClientes.ParamByName('id').AsInteger := Id;
    qryClientes.ExecSQL;

    Result := True;
    WriteLn('Cliente excluído com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao excluir cliente: ' + E.Message);
      Result := False;
    end;
  end;
end;

end.
