unit DBInitialData;

interface

uses
  System.SysUtils, System.Classes, ModelDB, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.MySQL, FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Model.Procedimento.Tipo;

type
  TDBInitialData = class
  private
    FModelDB: TModelDB;

    function ExecutarSQL(const ASQL: string; const ADescricao: string): Boolean;
    function InserirProcedimentosPadroes: Boolean;

  public
    constructor Create(AModelDB: TModelDB);
    destructor Destroy; override;

    function InserirDadosIniciais: Boolean;
  end;

implementation

uses
  System.DateUtils;

{ TDBInitialData }

constructor TDBInitialData.Create(AModelDB: TModelDB);
begin
  inherited Create;
  FModelDB := AModelDB;
end;

destructor TDBInitialData.Destroy;
begin
  inherited;
end;

function TDBInitialData.ExecutarSQL(const ASQL, ADescricao: string): Boolean;
var
  lQuery: TFDQuery;
begin
  Result := False;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FModelDB.FDConnection;
    try
      lQuery.SQL.Text := ASQL;
      lQuery.ExecSQL;
      Result := True;
      WriteLn('Sucesso: ', ADescricao);
    except
      on E: Exception do
      begin
        WriteLn('Erro ao ', ADescricao, ': ', E.Message);
      end;
    end;
  finally
    lQuery.Free;
  end;
end;

function TDBInitialData.InserirProcedimentosPadroes: Boolean;
var
  lQuery: TFDQuery;
  lTipo: TTipoProcedimento;
  lDescricao: string;
  lValor: Double;
  lSQL: string;
begin
  Result := False;

  WriteLn('Inserindo procedimentos padrões...');

  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FModelDB.FDConnection;

    // Primeiro verifica se já existem procedimentos para não duplicar
    lQuery.SQL.Text := 'SELECT COUNT(*) FROM procedimentos';
    lQuery.Open;
    if lQuery.Fields[0].AsInteger > 0 then
    begin
      WriteLn('Procedimentos já existem no banco. Pulando inserção.');
      Exit(True);
    end;

    // Insere os procedimentos padrões com valores base
    for lTipo := Low(TTipoProcedimento) to High(TTipoProcedimento) do
    begin
      lDescricao := TipoProcedimentoDescricao(lTipo);

      // Define valores padrão para cada tipo
      case lTipo of
        tpAtencaoDomiciliar:     lValor := 100.00;
        tpPressaoArterial:       lValor := 30.00;
        tpTemperaturaCorporal:   lValor := 25.00;
        tpGlicemiaCapilar:       lValor := 40.00;
        tpInalacao:              lValor := 50.00;
        tpInjetaveis:            lValor := 60.00;
      else
        lValor := 0.00;
      end;

      lSQL := 'INSERT INTO procedimentos (tipo, descricao, valor) VALUES (:tipo, :descricao, :valor)';
      lQuery.SQL.Text := lSQL;
      lQuery.ParamByName('tipo').AsInteger := Ord(lTipo);
      lQuery.ParamByName('descricao').AsString := lDescricao;
      lQuery.ParamByName('valor').AsFloat := lValor;

      try
        lQuery.ExecSQL;
        WriteLn('Procedimento inserido: ', TipoProcedimentoToStr(lTipo));
      except
        on E: Exception do
        begin
          WriteLn('Erro ao inserir procedimento ', TipoProcedimentoToStr(lTipo), ': ', E.Message);
          Exit(False);
        end;
      end;
    end;

    Result := True;
    WriteLn('Todos os procedimentos padrões foram inseridos com sucesso!');
  finally
    lQuery.Free;
  end;
end;

function TDBInitialData.InserirDadosIniciais: Boolean;
var
  Sucesso: Boolean;
begin
  if not FModelDB.ConectarBanco then
  begin
    WriteLn('Falha ao conectar ao banco de dados. Verifique as configurações.');
    Exit(False);
  end;

  try
    WriteLn('Iniciando inserção de dados iniciais...');

    // Insere os dados iniciais
    Sucesso := InserirProcedimentosPadroes;

    if Sucesso then
      WriteLn('Todos os dados iniciais foram inseridos com sucesso!')
    else
      WriteLn('Houve erros na inserção de alguns dados iniciais. Verifique os logs acima.');

    Result := Sucesso;
  finally
    FModelDB.DesconectarBanco;
  end;
end;

end.
