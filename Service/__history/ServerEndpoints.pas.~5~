uses
  System.SysUtils, System.Classes, IdHTTPServer, IdCustomHTTPServer,
  IdContext, System.JSON, IdGlobal, IdCoderMIME, IdURI,
  Procedimento.Controller, ModelDB, Model.Procedimento.Tipo;

type
  THTTPVerb = (hvGET, hvPOST, hvPUT, hvDELETE, hvOPTIONS);

  TServerEndpoints = class
  private
    FServer: TIdHTTPServer;
    FProcedimentoController: TProcedimentoController;

    procedure OnCommand(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure ProcessarRequisicao(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure ConfigurarCORS(AResponseInfo: TIdHTTPResponseInfo);

    function ObterVerboHTTP(const Method: string): THTTPVerb;
    function ExtrairParamPath(const URL: string; Indice: Integer): string;

    procedure RotaStatus(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure RotaProcedimentos(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure RotaProcedimentoById(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; const Id: string);
  public
    constructor Create;
    destructor Destroy; override;

    procedure Iniciar(const Porta: Integer = 8080);
    procedure Parar;

    property Server: TIdHTTPServer read FServer;
  end;

{ TServerEndpoints }

constructor TServerEndpoints.Create;
begin
  FServer := TIdHTTPServer.Create(nil);
  FServer.OnCommandGet := OnCommand;
  FServer.OnCommandOther := OnCommand;

  if not DBModel.FDConnection.Connected then
    DBModel.ConectarBanco;

  FProcedimentoController := TProcedimentoController.Create(DBModel);
end;

destructor TServerEndpoints.Destroy;
begin
  FProcedimentoController.Free;

  if Assigned(FServer) then
  begin
    if FServer.Active then
      FServer.Active := False;
    FServer.Free;
  end;

  inherited;
end;

procedure TServerEndpoints.Iniciar(const Porta: Integer);
begin
  FServer.DefaultPort := Porta;
  FServer.Active := True;

  WriteLn('Servidor HTTP iniciado na porta ' + IntToStr(Porta));
  WriteLn('Endpoints disponíveis:');
  WriteLn('GET    /api/status');
  WriteLn('GET    /api/procedimentos');
  WriteLn('GET    /api/procedimentos/:id');
  WriteLn('POST   /api/procedimentos');
  WriteLn('PUT    /api/procedimentos/:id');
  WriteLn('DELETE /api/procedimentos/:id');
end;

procedure TServerEndpoints.Parar;
begin
  if FServer.Active then
  begin
    FServer.Active := False;
    WriteLn('Servidor HTTP encerrado');
  end;
end;

procedure TServerEndpoints.OnCommand(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  try
    AResponseInfo.ContentType := 'application/json; charset=UTF-8';
    ConfigurarCORS(AResponseInfo);

    if SameText(ARequestInfo.Command, 'OPTIONS') then
    begin
      AResponseInfo.ResponseNo := 200;
      Exit;
    end;

    ProcessarRequisicao(ARequestInfo, AResponseInfo);
  except
    on E: Exception do
    begin
      AResponseInfo.ResponseNo := 500;
      AResponseInfo.ContentText := Format('{"error":"Erro interno: %s"}', [E.Message]);
    end;
  end;
end;

procedure TServerEndpoints.ProcessarRequisicao(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  lPath: string;
  lIdParam: string;
  lVerbo: THTTPVerb;
begin
  lPath := ARequestInfo.URI;
  lVerbo := ObterVerboHTTP(ARequestInfo.Command);

  if lPath = '/api/status' then
  begin
    if lVerbo = hvGET then
      RotaStatus(ARequestInfo, AResponseInfo)
    else
      AResponseInfo.ResponseNo := 405;
  end
  else if lPath = '/api/procedimentos' then
  begin
    if lVerbo in [hvGET, hvPOST] then
      RotaProcedimentos(ARequestInfo, AResponseInfo)
    else
      AResponseInfo.ResponseNo := 405;
  end
  else if lPath.StartsWith('/api/procedimentos/') then
  begin
    lIdParam := ExtrairParamPath(lPath, 3);
    if lIdParam <> '' then
      RotaProcedimentoById(ARequestInfo, AResponseInfo, lIdParam)
    else
    begin
      AResponseInfo.ResponseNo := 400;
      AResponseInfo.ContentText := '{"error": "ID não fornecido"}';
    end;
  end
  else
  begin
    AResponseInfo.ResponseNo := 404;
    AResponseInfo.ContentText := '{"error":"Endpoint não encontrado"}';
  end;
end;

procedure TServerEndpoints.RotaStatus(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  lObj: TJSONObject;
begin
  lObj := TJSONObject.Create;
  try
    lObj.AddPair('status', 'online');
    lObj.AddPair('version', '1.0.0');
    lObj.AddPair('database', BoolToStr(DBModel.FDConnection.Connected, True));
    lObj.AddPair('timestamp', FormatDateTime('yyyy-mm-dd hh:nn:ss', Now));
    AResponseInfo.ResponseNo := 200;
    AResponseInfo.ContentText := lObj.ToJSON;
  finally
    lObj.Free;
  end;
end;

procedure TServerEndpoints.RotaProcedimentos(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
var
  lBodyJSON: TJSONObject;
  lTipo: Integer;
  lDescricao: string;
  lValor: Currency;
  lResult: Boolean;
  lVerbo: THTTPVerb;
begin
  lVerbo := ObterVerboHTTP(ARequestInfo.Command);

  case lVerbo of
    hvGET:
      begin
        AResponseInfo.ResponseNo := 200;
        AResponseInfo.ContentText := FProcedimentoController.ObterProcedimentos.ToJSON;
      end;

    hvPOST:
      begin
        lBodyJSON := TJSONObject(TJSONObject.ParseJSONValue(ARequestInfo.Content));
        try
          lTipo := lBodyJSON.GetValue<Integer>('tipo');
          lDescricao := lBodyJSON.GetValue<string>('descricao');
          lValor := lBodyJSON.GetValue<Double>('valor');

          lResult := FProcedimentoController.InserirProcedimento(TTipoProcedimento(lTipo), lDescricao, lValor);
          if lResult then
          begin
            AResponseInfo.ResponseNo := 201;
            AResponseInfo.ContentText := '{"mensagem": "Procedimento criado com sucesso"}';
          end
          else
          begin
            AResponseInfo.ResponseNo := 500;
            AResponseInfo.ContentText := '{"erro": "Falha ao inserir procedimento"}';
          end;
        finally
          lBodyJSON.Free;
        end;
      end;
  end;
end;

procedure TServerEndpoints.RotaProcedimentoById(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo; const Id: string);
var
  lId: Int64;
  lBodyJSON: TJSONObject;
  lTipo: Integer;
  lDescricao: string;
  lValor: Currency;
  lResult: Boolean;
  lVerbo: THTTPVerb;
begin
  lVerbo := ObterVerboHTTP(ARequestInfo.Command);
  lId := StrToInt64Def(Id, 0);

  case lVerbo of
    hvGET:
      begin
        AResponseInfo.ResponseNo := 200;
        AResponseInfo.ContentText := FProcedimentoController.ObterProcedimentoPorId(lId).ToJSON;
      end;

    hvPUT:
      begin
        lBodyJSON := TJSONObject(TJSONObject.ParseJSONValue(ARequestInfo.Content));
        try
          lTipo := lBodyJSON.GetValue<Integer>('tipo');
          lDescricao := lBodyJSON.GetValue<string>('descricao');
          lValor := lBodyJSON.GetValue<Double>('valor');

          lResult := FProcedimentoController.AtualizarProcedimento(lId, TTipoProcedimento(lTipo), lDescricao, lValor);
          if lResult then
          begin
            AResponseInfo.ResponseNo := 200;
            AResponseInfo.ContentText := '{"mensagem": "Procedimento atualizado com sucesso"}';
          end
          else
          begin
            AResponseInfo.ResponseNo := 500;
            AResponseInfo.ContentText := '{"erro": "Falha ao atualizar procedimento"}';
          end;
        finally
          lBodyJSON.Free;
        end;
      end;

    hvDELETE:
      begin
        lResult := FProcedimentoController.ExcluirProcedimento(lId);
        if lResult then
        begin
          AResponseInfo.ResponseNo := 200;
          AResponseInfo.ContentText := '{"mensagem": "Procedimento excluído com sucesso"}';
        end
        else
        begin
          AResponseInfo.ResponseNo := 404;
          AResponseInfo.ContentText := '{"erro": "Procedimento não encontrado ou falha ao excluir"}';
        end;
      end;
  end;
end;

procedure TServerEndpoints.ConfigurarCORS(AResponseInfo: TIdHTTPResponseInfo);
begin
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Origin'] := '*';
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Methods'] := 'GET, POST, PUT, DELETE, OPTIONS';
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Headers'] := 'Content-Type, Authorization';
end;

function TServerEndpoints.ObterVerboHTTP(const Method: string): THTTPVerb;
begin
  if SameText(Method, 'GET') then Result := hvGET
  else if SameText(Method, 'POST') then Result := hvPOST
  else if SameText(Method, 'PUT') then Result := hvPUT
  else if SameText(Method, 'DELETE') then Result := hvDELETE
  else if SameText(Method, 'OPTIONS') then Result := hvOPTIONS
  else Result := hvGET;
end;

function TServerEndpoints.ExtrairParamPath(const URL: string; Indice: Integer): string;
var
  lPartes: TArray<string>;
begin
  Result := '';
  lPartes := URL.Split(['/']);
  if (Indice >= 0) and (Indice < Length(lPartes)) then
    Result := lPartes[Indice];
end;

