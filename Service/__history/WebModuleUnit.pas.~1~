unit WebModuleUnit;

interface

uses
  System.SysUtils, System.Classes, Web.HTTPApp, System.JSON,
  ModelDB;

type
  TWebModule1 = class(TWebModule)
    procedure WebModuleCreate(Sender: TObject);
    procedure WebModule1DefaultHandlerAction(Sender: TObject;
      Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
    procedure WebModule1ClientesAction(Sender: TObject; Request: TWebRequest;
      Response: TWebResponse; var Handled: Boolean);
    procedure WebModule1ClienteByIdAction(Sender: TObject; Request: TWebRequest;
      Response: TWebResponse; var Handled: Boolean);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  WebModuleClass: TComponentClass = TWebModule1;

implementation

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

procedure TWebModule1.WebModuleCreate(Sender: TObject);
begin
  // Configurar rotas da API
  Actions.Add.Name := 'DefaultHandler';
  Actions[0].Default := True;
  Actions[0].OnAction := WebModule1DefaultHandlerAction;
  Actions[0].PathInfo := '';

  // Rota para listar todos os clientes: GET /clientes
  Actions.Add.Name := 'Clientes';
  Actions[1].PathInfo := '/clientes';
  Actions[1].OnAction := WebModule1ClientesAction;

  // Rota para operações com cliente específico: GET/PUT/DELETE /clientes/{id}
  Actions.Add.Name := 'ClienteById';
  Actions[2].PathInfo := '/clientes/(:id)';
  Actions[2].OnAction := WebModule1ClienteByIdAction;
end;

procedure TWebModule1.WebModule1DefaultHandlerAction(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
var
  APIInfo: TJSONObject;
begin
  APIInfo := TJSONObject.Create;
  try
    APIInfo.AddPair('api', 'ModelServer MVC');
    APIInfo.AddPair('version', '1.0');
    APIInfo.AddPair('endpoints', '/clientes, /clientes/{id}');

    Response.ContentType := 'application/json';
    Response.Content := APIInfo.ToJSON;
    Response.StatusCode := 200;
  finally
    APIInfo.Free;
  end;
  Handled := True;
end;

procedure TWebModule1.WebModule1ClientesAction(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
var
  JSONArray: TJSONArray;
  JSONObj: TJSONObject;
  Nome, Email, Telefone: string;
begin
  Response.ContentType := 'application/json';

  // GET: Listar todos os clientes
  if Request.MethodType = mtGet then
  begin
    JSONArray := ModelDB.ObterClientes;
    try
      Response.Content := JSONArray.ToJSON;
      Response.StatusCode := 200;
    finally
      JSONArray.Free;
    end;
  end
  // POST: Inserir novo cliente
  else if Request.MethodType = mtPost then
  begin
    try
      JSONObj := TJSONObject.ParseJSONValue(Request.Content) as TJSONObject;
      try
        Nome := JSONObj.GetValue<string>('nome');
        Email := JSONObj.GetValue<string>('email');
        Telefone := JSONObj.GetValue<string>('telefone');

        if ModelDB.InserirCliente(Nome, Email, Telefone) then
        begin
          Response.StatusCode := 201; // Created
          Response.Content := '{"status":"success","message":"Cliente cadastrado com sucesso"}';
        end
        else
        begin
          Response.StatusCode := 500; // Internal Server Error
          Response.Content := '{"status":"error","message":"Falha ao cadastrar cliente"}';
        end;
      finally
        JSONObj.Free;
      end;
    except
      on E: Exception do
      begin
        Response.StatusCode := 400; // Bad Request
        Response.Content := Format('{"status":"error","message":"Formato de dados inválido: %s"}', [E.Message]);
      end;
    end;
  end
  else
  begin
    Response.StatusCode := 405; // Method Not Allowed
    Response.Content := '{"status":"error","message":"Método não permitido"}';
  end;

  Handled := True;
end;

procedure TWebModule1.WebModule1ClienteByIdAction(Sender: TObject;
  Request: TWebRequest; Response: TWebResponse; var Handled: Boolean);
var
  ClienteId: Integer;
  JSONObj: TJSONObject;
  Nome, Email, Telefone: string;
begin
  Response.ContentType := 'application/json';

  try
    ClienteId := StrToInt(Request.PathInfo.Substring(10));

    // GET: Obter cliente por ID
    if Request.MethodType = mtGet then
    begin
      JSONObj := ModelDB.ObterClientePorId(ClienteId);
      try
        if JSONObj.Count > 0 then
        begin
          Response.StatusCode := 200;
          Response.Content := JSONObj.ToJSON;
        end
        else
        begin
          Response.StatusCode := 404; // Not Found
          Response.Content := '{"status":"error","message":"Cliente não encontrado"}';
        end;
      finally
        JSONObj.Free;
      end;
    end
    // PUT: Atualizar cliente
    else if Request.MethodType = mtPut then
    begin
      try
        JSONObj := TJSONObject.ParseJSONValue(Request.Content) as TJSONObject;
        try
          Nome := JSONObj.GetValue<string>('nome');
          Email := JSONObj.GetValue<string>('email');
          Telefone := JSONObj.GetValue<string>('telefone');

          if ModelDB.AtualizarCliente(ClienteId, Nome, Email, Telefone) then
          begin
            Response.StatusCode := 200;
            Response.Content := '{"status":"success","message":"Cliente atualizado com sucesso"}';
          end
          else
          begin
            Response.StatusCode := 500; // Internal Server Error
            Response.Content := '{"status":"error","message":"Falha ao atualizar cliente"}';
          end;
        finally
          JSONObj.Free;
        end;
      except
        on E: Exception do
        begin
          Response.StatusCode := 400; // Bad Request
          Response.Content := Format('{"status":"error","message":"Formato de dados inválido: %s"}', [E.Message]);
        end;
      end;
    end
    // DELETE: Excluir cliente
    else if Request.MethodType = mtDelete then
    begin
      if ModelDB.ExcluirCliente(ClienteId) then
      begin
        Response.StatusCode := 200;
        Response.Content := '{"status":"success","message":"Cliente excluído com sucesso"}';
      end
      else
      begin
        Response.StatusCode := 500; // Internal Server Error
        Response.Content := '{"status":"error","message":"Falha ao excluir cliente"}';
      end;
    end
    else
    begin
      Response.StatusCode := 405; // Method Not Allowed
      Response.Content := '{"status":"error","message":"Método não permitido"}';
    end;
  except
    on E: Exception do
    begin
      Response.StatusCode := 400; // Bad Request
      Response.Content := Format('{"status":"error","message":"ID inválido ou outro erro: %s"}', [E.Message]);
    end;
  end;

  Handled := True;
end;

end.
