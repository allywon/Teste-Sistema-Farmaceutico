unit Procedimento.Controller;

interface

uses
  System.SysUtils, System.Classes, System.JSON, FireDAC.Comp.Client,
  Data.DB, ModelDB, Model.Procedimento, Model.Procedimento.Tipo;

type
  TProcedimentoController = class
  private
    FModelDB: TModelDB;
    function ProcedimentoParaJSON(Procedimento: TProcedimento): TJSONObject;
  public
    constructor Create(AModelDB: TModelDB);
    destructor Destroy; override;

    function ObterProcedimentos: TJSONArray;
    function ObterProcedimentoPorId(const Id: Int64): TJSONObject;
    function ObterProcedimentoPorTipo(const Tipo: TTipoProcedimento): TJSONArray;
    function InserirProcedimento(const Tipo: TTipoProcedimento; const Descricao: string; const Valor: Currency): Boolean;
    function AtualizarProcedimento(const Id: Int64; const Tipo: TTipoProcedimento; const Descricao: string; const Valor: Currency): Boolean;
    function ExcluirProcedimento(const Id: Int64): Boolean;

    // Método para carregar um objeto Procedimento do DB
    function CarregarProcedimento(const Id: Int64; Procedimento: TProcedimento): Boolean;
  end;

implementation

{ TProcedimentoController }

constructor TProcedimentoController.Create(AModelDB: TModelDB);
begin
  inherited Create;
  FModelDB := AModelDB;
end;

destructor TProcedimentoController.Destroy;
begin
  // Não liberamos o ModelDB aqui pois foi passado por referência
  inherited;
end;

function TProcedimentoController.ProcedimentoParaJSON(Procedimento: TProcedimento): TJSONObject;
begin
  Result := TJSONObject.Create;
  try
    Result.AddPair('id', TJSONNumber.Create(Procedimento.Id));
    Result.AddPair('tipo', TJSONNumber.Create(Ord(Procedimento.Tipo)));
    Result.AddPair('tipoDescricao', TipoProcedimentoToStr(Procedimento.Tipo));
    Result.AddPair('descricao', Procedimento.Descricao);
    Result.AddPair('valor', TJSONNumber.Create(Procedimento.Valor));
  except
    Result.Free;
    raise;
  end;
end;

function TProcedimentoController.ObterProcedimentos: TJSONArray;
var
  Query: TFDQuery;
  JSONArray: TJSONArray;
  Procedimento: TProcedimento;
begin
  JSONArray := TJSONArray.Create;
  Query := TFDQuery.Create(nil);
  Procedimento := TProcedimento.Create;

  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'SELECT * FROM procedimentos ORDER BY tipo';
    Query.Open;

    while not Query.Eof do
    begin
      Procedimento.Id := Query.FieldByName('id').AsLargeInt;
      Procedimento.Tipo := TTipoProcedimento(Query.FieldByName('tipo').AsInteger);
      Procedimento.Descricao := Query.FieldByName('descricao').AsString;
      Procedimento.Valor := Query.FieldByName('valor').AsCurrency;

      JSONArray.AddElement(ProcedimentoParaJSON(Procedimento));
      Query.Next;
    end;

    Result := JSONArray;
  except
    on E: Exception do
    begin
      JSONArray.Free;
      Result := TJSONArray.Create;
      WriteLn('Erro ao obter procedimentos: ' + E.Message);
    end;
  end;

  Query.Free;
  Procedimento.Free;
end;

function TProcedimentoController.ObterProcedimentoPorId(const Id: Int64): TJSONObject;
var
  Query: TFDQuery;
  Procedimento: TProcedimento;
begin
  Query := TFDQuery.Create(nil);
  Procedimento := TProcedimento.Create;

  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'SELECT * FROM procedimentos WHERE id = :id';
    Query.ParamByName('id').AsLargeInt := Id;
    Query.Open;

    if not Query.IsEmpty then
    begin
      Procedimento.Id := Query.FieldByName('id').AsLargeInt;
      Procedimento.Tipo := TTipoProcedimento(Query.FieldByName('tipo').AsInteger);
      Procedimento.Descricao := Query.FieldByName('descricao').AsString;
      Procedimento.Valor := Query.FieldByName('valor').AsCurrency;

      Result := ProcedimentoParaJSON(Procedimento);
    end
    else
      Result := TJSONObject.Create; // Retorna objeto vazio se não encontrar

  except
    on E: Exception do
    begin
      Result := TJSONObject.Create;
      WriteLn('Erro ao obter procedimento por ID: ' + E.Message);
    end;
  end;

  Query.Free;
  Procedimento.Free;
end;

function TProcedimentoController.ObterProcedimentoPorTipo(const Tipo: TTipoProcedimento): TJSONArray;
var
  Query: TFDQuery;
  JSONArray: TJSONArray;
  Procedimento: TProcedimento;
begin
  JSONArray := TJSONArray.Create;
  Query := TFDQuery.Create(nil);
  Procedimento := TProcedimento.Create;

  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'SELECT * FROM procedimentos WHERE tipo = :tipo ORDER BY descricao';
    Query.ParamByName('tipo').AsInteger := Ord(Tipo);
    Query.Open;

    while not Query.Eof do
    begin
      Procedimento.Id := Query.FieldByName('id').AsLargeInt;
      Procedimento.Tipo := TTipoProcedimento(Query.FieldByName('tipo').AsInteger);
      Procedimento.Descricao := Query.FieldByName('descricao').AsString;
      Procedimento.Valor := Query.FieldByName('valor').AsCurrency;

      JSONArray.AddElement(ProcedimentoParaJSON(Procedimento));
      Query.Next;
    end;

    Result := JSONArray;
  except
    on E: Exception do
    begin
      JSONArray.Free;
      Result := TJSONArray.Create;
      WriteLn('Erro ao obter procedimentos por tipo: ' + E.Message);
    end;
  end;

  Query.Free;
  Procedimento.Free;
end;

function TProcedimentoController.InserirProcedimento(const Tipo: TTipoProcedimento; const Descricao: string; const Valor: Currency): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  Query := TFDQuery.Create(nil);

  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'INSERT INTO procedimentos (tipo, descricao, valor) VALUES (:tipo, :descricao, :valor)';
    Query.ParamByName('tipo').AsInteger := Ord(Tipo);
    Query.ParamByName('descricao').AsString := Descricao;
    Query.ParamByName('valor').AsCurrency := Valor;
    Query.ExecSQL;

    Result := True;
    WriteLn('Procedimento inserido com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao inserir procedimento: ' + E.Message);
      Result := False;
    end;
  end;

  Query.Free;
end;

function TProcedimentoController.AtualizarProcedimento(const Id: Int64; const Tipo: TTipoProcedimento; const Descricao: string; const Valor: Currency): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  Query := TFDQuery.Create(nil);

  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'UPDATE procedimentos SET tipo = :tipo, descricao = :descricao, valor = :valor WHERE id = :id';
    Query.ParamByName('id').AsLargeInt := Id;
    Query.ParamByName('tipo').AsInteger := Ord(Tipo);
    Query.ParamByName('descricao').AsString := Descricao;
    Query.ParamByName('valor').AsCurrency := Valor;
    Query.ExecSQL;

    Result := True;
    WriteLn('Procedimento atualizado com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao atualizar procedimento: ' + E.Message);
      Result := False;
    end;
  end;

  Query.Free;
end;

function TProcedimentoController.ExcluirProcedimento(const Id: Int64): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  Query := TFDQuery.Create(nil);

  try
    Query.Connection := FModelDB.FDConnection;

    // Verifica se não está sendo utilizado em serviços
    Query.SQL.Text := 'SELECT COUNT(*) FROM servicos_farmaceuticos_itens WHERE procedimento_id = :id';
    Query.ParamByName('id').AsLargeInt := Id;
    Query.Open;

    if Query.Fields[0].AsInteger > 0 then
    begin
      WriteLn('Não é possível excluir procedimento, pois está em uso em serviços farmacêuticos.');
      Exit(False);
    end;

    // Se não estiver em uso, exclui
    Query.Close;
    Query.SQL.Text := 'DELETE FROM procedimentos WHERE id = :id';
    Query.ParamByName('id').AsLargeInt := Id;
    Query.ExecSQL;

    Result := True;
    WriteLn('Procedimento excluído com sucesso!');
  except
    on E: Exception do
    begin
      WriteLn('Erro ao excluir procedimento: ' + E.Message);
      Result := False;
    end;
  end;

  Query.Free;
end;

function TProcedimentoController.CarregarProcedimento(const Id: Int64; Procedimento: TProcedimento): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;

  if not Assigned(Procedimento) then
    Exit;

  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FModelDB.FDConnection;
    Query.SQL.Text := 'SELECT * FROM procedimentos WHERE id = :id';
    Query.ParamByName('id').AsLargeInt := Id;
    Query.Open;

    if not Query.IsEmpty then
    begin
      Procedimento.Id := Query.FieldByName('id').AsLargeInt;
      Procedimento.Tipo := TTipoProcedimento(Query.FieldByName('tipo').AsInteger);
      Procedimento.Descricao := Query.FieldByName('descricao').AsString;
      Procedimento.Valor := Query.FieldByName('valor').AsCurrency;
      Result := True;
    end
    else
      Procedimento.Limpar;
  except
    on E: Exception do
    begin
      WriteLn('Erro ao carregar procedimento: ' + E.Message);
      Result := False;
    end;
  end;

  Query.Free;
end;

end.
