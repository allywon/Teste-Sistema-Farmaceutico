unit ServerEndpoints;

interface

uses
  System.SysUtils, System.Classes, IdHTTPServer, IdCustomHTTPServer,
  IdContext, System.JSON, IdGlobal, IdCoderMIME, IdURI,
  Routes.Manager, ModelDB;

type
  TServerEndpoints = class
  private
    FServer: TIdHTTPServer;
    FRouteManager: TRouteManager;

    procedure OnCommand(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure ProcessarRequisicao(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
    procedure ConfigurarCORS(AResponseInfo: TIdHTTPResponseInfo);
  public
    constructor Create;
    destructor Destroy; override;

    procedure Iniciar(const Porta: Integer = 8080);
    procedure Parar;

    property Server: TIdHTTPServer read FServer;
  end;

implementation

{ TServerEndpoints }

constructor TServerEndpoints.Create;
begin
  FServer := TIdHTTPServer.Create(nil);
  FServer.OnCommandGet := OnCommand;
  FServer.OnCommandOther := OnCommand;

  if not DBModel.FDConnection.Connected then
    DBModel.ConectarBanco;

  FRouteManager := TRouteManager.Create(FServer, DBModel);
end;

destructor TServerEndpoints.Destroy;
begin
  FRouteManager.Free;

  if Assigned(FServer) then
  begin
    if FServer.Active then
      FServer.Active := False;
    FServer.Free;
  end;

  inherited;
end;

procedure TServerEndpoints.Iniciar(const Porta: Integer);
begin
  FServer.DefaultPort := Porta;
  FServer.Active := True;

  WriteLn('Servidor HTTP iniciado na porta ' + IntToStr(Porta));
  FRouteManager.RegistrarRotas;
end;

procedure TServerEndpoints.Parar;
begin
  if FServer.Active then
  begin
    FServer.Active := False;
    WriteLn('Servidor HTTP encerrado');
  end;
end;

procedure TServerEndpoints.OnCommand(AContext: TIdContext; ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  try
    AResponseInfo.ContentType := 'application/json; charset=UTF-8';
    ConfigurarCORS(AResponseInfo);

    if SameText(ARequestInfo.Command, 'OPTIONS') then
    begin
      AResponseInfo.ResponseNo := 200;
      Exit;
    end;

    ProcessarRequisicao(ARequestInfo, AResponseInfo);
  except
    on E: Exception do
    begin
      AResponseInfo.ResponseNo := 500;
      AResponseInfo.ContentText := Format('{"error":"Erro interno: %s"}', [E.Message]);
    end;
  end;
end;

procedure TServerEndpoints.ProcessarRequisicao(ARequestInfo: TIdHTTPRequestInfo; AResponseInfo: TIdHTTPResponseInfo);
begin
  FRouteManager.ProcessarRequisicao(ARequestInfo, AResponseInfo);
end;

procedure TServerEndpoints.ConfigurarCORS(AResponseInfo: TIdHTTPResponseInfo);
begin
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Origin'] := '*';
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Methods'] := 'GET, POST, PUT, DELETE, OPTIONS';
  AResponseInfo.CustomHeaders.Values['Access-Control-Allow-Headers'] := 'Content-Type, Authorization';
end;

end.
