unit Procedimento.Svc;

interface

uses
  FireDAC.Comp.Client, ModelDB, Model.Procedimento, Model.Procedimento.Tipo,
  System.Generics.Collections, System.SysUtils;

type
  TProcedimentoSQLHandler = class
  private
    FDB: TDBModel;
  public
    constructor Create(ADB: TDBModel);

    function ListarTodos: TArray<TProcedimento>;
    function BuscarPorId(const AId: Int64): TProcedimento;
    function BuscarPorTipo(const ATipo: TTipoProcedimento): TArray<TProcedimento>;

    function Inserir(AProcedimento: TProcedimento): Boolean;
    function Atualizar(const AId: Int64; AProcedimento: TProcedimento): Boolean;
    function Excluir(const AId: Int64): Boolean;

    function Carregar(const AId: Int64; AProcedimento: TProcedimento): Boolean;
  end;

implementation

{ TProcedimentoSQLHandler }

constructor TProcedimentoSQLHandler.Create(ADB: TDBModel);
begin
  FDB := ADB;
end;

function TProcedimentoSQLHandler.ListarTodos: TArray<TProcedimento>;
var
  lQuery: TFDQuery;
  Lista: TList<TProcedimento>;
  lProcedimento: TProcedimento;
begin
  Lista := TList<TProcedimento>.Create;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'SELECT * FROM procedimentos ORDER BY tipo';
    lQuery.Open;
    while not lQuery.Eof do
    begin
      lProcedimento := TProcedimento.Create;
      lProcedimento.Id := lQuery.FieldByName('id').AsLargeInt;
      lProcedimento.Tipo := TTipoProcedimento(lQuery.FieldByName('tipo').AsInteger);
      lProcedimento.Descricao := lQuery.FieldByName('descricao').AsString;
      lProcedimento.Valor := lQuery.FieldByName('valor').AsCurrency;
      Lista.Add(lProcedimento);
      lQuery.Next;
    end;
    Result := Lista.ToArray;
  finally
    lQuery.Free;
    Lista.Free;
  end;
end;

function TProcedimentoSQLHandler.BuscarPorId(const AId: Int64): TProcedimento;
var
  lQuery: TFDQuery;
begin
  Result := nil;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'SELECT * FROM procedimentos WHERE id = :id';
    lQuery.ParamByName('id').AsLargeInt := AId;
    lQuery.Open;
    if not lQuery.IsEmpty then
    begin
      Result := TProcedimento.Create;
      Result.Id := lQuery.FieldByName('id').AsLargeInt;
      Result.Tipo := TTipoProcedimento(lQuery.FieldByName('tipo').AsInteger);
      Result.Descricao := lQuery.FieldByName('descricao').AsString;
      Result.Valor := lQuery.FieldByName('valor').AsCurrency;
    end;
  finally
    lQuery.Free;
  end;
end;

function TProcedimentoSQLHandler.BuscarPorTipo(const ATipo: TTipoProcedimento): TArray<TProcedimento>;
var
  lQuery: TFDQuery;
  Lista: TList<TProcedimento>;
  P: TProcedimento;
begin
  Lista := TList<TProcedimento>.Create;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'SELECT * FROM procedimentos WHERE tipo = :tipo ORDER BY descricao';
    lQuery.ParamByName('tipo').AsInteger := Ord(ATipo);
    lQuery.Open;
    while not lQuery.Eof do
    begin
      P := TProcedimento.Create;
      P.Id := lQuery.FieldByName('id').AsLargeInt;
      P.Tipo := TTipoProcedimento(lQuery.FieldByName('tipo').AsInteger);
      P.Descricao := lQuery.FieldByName('descricao').AsString;
      P.Valor := lQuery.FieldByName('valor').AsCurrency;
      Lista.Add(P);
      lQuery.Next;
    end;
    Result := Lista.ToArray;
  finally
    lQuery.Free;
    Lista.Free;
  end;
end;

function TProcedimentoSQLHandler.Inserir(AProcedimento: TProcedimento): Boolean;
var
  lQuery: TFDQuery;
begin
  Result := False;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'INSERT INTO procedimentos (tipo, descricao, valor) VALUES (:tipo, :descricao, :valor)';
    lQuery.ParamByName('tipo').AsInteger := Ord(AProcedimento.Tipo);
    lQuery.ParamByName('descricao').AsString := AProcedimento.Descricao;
    lQuery.ParamByName('valor').AsCurrency := AProcedimento.Valor;
    lQuery.ExecSQL;
    Result := True;
  finally
    lQuery.Free;
  end;
end;

function TProcedimentoSQLHandler.Atualizar(const AId: Int64; AProcedimento: TProcedimento): Boolean;
var
  lQuery: TFDQuery;
begin
  Result := False;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'UPDATE procedimentos SET tipo = :tipo, descricao = :descricao, valor = :valor WHERE id = :id';
    lQuery.ParamByName('id').AsLargeInt := AId;
    lQuery.ParamByName('tipo').AsInteger := Ord(AProcedimento.Tipo);
    lQuery.ParamByName('descricao').AsString := AProcedimento.Descricao;
    lQuery.ParamByName('valor').AsCurrency := AProcedimento.Valor;
    lQuery.ExecSQL;
    Result := True;
  finally
    lQuery.Free;
  end;
end;

function TProcedimentoSQLHandler.Excluir(const AId: Int64): Boolean;
var
  lQuery: TFDQuery;
begin
  Result := False;
  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'SELECT COUNT(*) FROM servicos_farmaceuticos_itens WHERE procedimento_id = :id';
    lQuery.ParamByName('id').AsLargeInt := AId;
    lQuery.Open;
    if lQuery.Fields[0].AsInteger > 0 then
      Exit(False); // Está em uso
    lQuery.Close;
    lQuery.SQL.Text := 'DELETE FROM procedimentos WHERE id = :id';
    lQuery.ParamByName('id').AsLargeInt := AId;
    lQuery.ExecSQL;
    Result := True;
  finally
    lQuery.Free;
  end;
end;

function TProcedimentoSQLHandler.Carregar(const AId: Int64; AProcedimento: TProcedimento): Boolean;
var
  lQuery: TFDQuery;
begin
  Result := False;
  if not Assigned(AProcedimento) then
    Exit;

  lQuery := TFDQuery.Create(nil);
  try
    lQuery.Connection := FDB.FDConnection;
    lQuery.SQL.Text := 'SELECT * FROM procedimentos WHERE id = :id';
    lQuery.ParamByName('id').AsLargeInt := AId;
    lQuery.Open;
    if not lQuery.IsEmpty then
    begin
      AProcedimento.Id := lQuery.FieldByName('id').AsLargeInt;
      AProcedimento.Tipo := TTipoProcedimento(lQuery.FieldByName('tipo').AsInteger);
      AProcedimento.Descricao := lQuery.FieldByName('descricao').AsString;
      AProcedimento.Valor := lQuery.FieldByName('valor').AsCurrency;
      Result := True;
    end
    else
      AProcedimento.Limpar;
  finally
    lQuery.Free;
  end;
end;

end.

